import { ApolloClient, gql, InMemoryCache } from "@apollo/client";
import {
  Box,
  Button,
  Container,
  Flex,
  Heading,
  Image,
  List,
  ListItem,
  SimpleGrid,
  Stack,
  StackDivider,
  Table,
  TableContainer,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue,
} from "@chakra-ui/react";
import Head from "next/head";
import Link from "next/link";
import React from "react";

export default function Character(results) {
  const characterInfo = results.results;

  return (
    <div>
      <Head>
        <title>{characterInfo.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/rickmorty.ico" />
      </Head>

      <Container maxW={"7xl"}>
        <SimpleGrid spacing={{ base: 8, md: 10 }} py={{ base: 18, md: 24 }}>
          <Flex justify="center">
            <Image
              rounded="md"
              alt={`${characterInfo.name} image`}
              src={characterInfo.image}
              width={300}
              height={300}
            />
          </Flex>
          <Stack spacing={{ base: 6, md: 10 }}>
            <Box as={"header"}>
              <Heading
                align="center"
                lineHeight={1.1}
                fontWeight={600}
                fontSize={{ base: "2xl", sm: "4xl", lg: "5xl" }}
              >
                {characterInfo.name}
              </Heading>
            </Box>

            <Stack
              spacing={{ base: 4, sm: 6 }}
              direction={"column"}
              divider={<StackDivider borderColor={useColorModeValue("gray.200", "gray.600")} />}
            >
              <Box>
                <Text
                  fontSize={{ base: "16px", lg: "18px" }}
                  color={useColorModeValue("yellow.500", "yellow.300")}
                  fontWeight={"500"}
                  textTransform={"uppercase"}
                  mb={"4"}
                >
                  {characterInfo.name} Information
                </Text>

                <List spacing={2}>
                  <ListItem>
                    <Text as={"span"} fontWeight={"bold"}>
                      Name:{" "}
                    </Text>
                    {characterInfo.name}
                  </ListItem>
                  <ListItem>
                    <Text as={"span"} fontWeight={"bold"}>
                      Status:{" "}
                    </Text>
                    {characterInfo.status}
                  </ListItem>
                  <ListItem>
                    <Text as={"span"} fontWeight={"bold"}>
                      Gender:{" "}
                    </Text>
                    {characterInfo.gender}
                  </ListItem>
                  <ListItem>
                    <Text as={"span"} fontWeight={"bold"}>
                      Species:{" "}
                    </Text>
                    {characterInfo.species}
                  </ListItem>
                  <ListItem>
                    <Text as={"span"} fontWeight={"bold"}>
                      Location:{" "}
                    </Text>
                    {characterInfo.location?.name}
                  </ListItem>
                  <ListItem>
                    <Text as={"span"} fontWeight={"bold"}>
                      Originally From:{" "}
                    </Text>
                    {characterInfo.origin?.name}
                  </ListItem>
                </List>
              </Box>

              <Box>
                <Text
                  fontSize={{ base: "16px", lg: "18px" }}
                  color={useColorModeValue("yellow.500", "yellow.300")}
                  fontWeight={"500"}
                  textTransform={"uppercase"}
                  mb={"4"}
                >
                  {characterInfo.name} Episodes
                </Text>

                <TableContainer>
                  <Table size="sm">
                    <Thead>
                      <Tr>
                        <Th width={200}>Air Date</Th>
                        <Th width={500}>Episode</Th>
                      </Tr>
                    </Thead>
                    <Tbody>
                      {characterInfo &&
                        characterInfo?.episode?.map((ep) => (
                          <Tr key={ep.id}>
                            <Td>{ep.air_date}</Td>
                            <Td>
                              {ep.episode} <br /> {ep.name}
                            </Td>
                          </Tr>
                        ))}
                    </Tbody>
                  </Table>
                </TableContainer>
              </Box>
            </Stack>

            <Link href="/">
              <a>
                <Button
                  rounded={"md"}
                  w={"80"}
                  mt={8}
                  colorScheme="linkedin"
                  textTransform={"uppercase"}
                  _hover={{
                    transform: "translateY(2px)",
                    boxShadow: "lg",
                  }}
                >
                  Back to All Characters
                </Button>
              </a>
            </Link>
          </Stack>
        </SimpleGrid>
      </Container>
    </div>
  );
}

export async function getServerSideProps(context) {
  const { query } = context;

  const client = new ApolloClient({
    uri: "https://rickandmortyapi.com/graphql",
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
    query{
      character(id: ${query.id}) {
        name
        status
        species
        type
        gender
        image
        origin{
          id
          name
        }
        location{
          id
          name
        }
        episode{
          id
          name
          air_date
          episode
        }
        created
      }
    }
    `,
  });

  return {
    props: {
      results: data.character,
    },
  };
}
